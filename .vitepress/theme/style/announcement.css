<!-- .vitepress/theme/components/announcement.vue -->
<template>
  <div 
    v-if="visible" 
    class="floating-notice"
    :class="{ 'notice-hidden': !visible }"
  >
    <div class="notice-fcontent">
      <h3 class="notice-ftitle">üì¢ {{ ftitle }}</h3>
      <p class="notice-ftext">{{ fcontent }}</p>
      <button 
        class="notice-close" 
        @click="handleClose"
        aria-label="ÂÖ≥Èó≠ÂÖ¨Âëä"
      >
        √ó
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useStorage } from '@vueuse/core'

// ÁªÑ‰ª∂Â±ûÊÄßÂÆö‰πâ
const props = defineProps({
  ftitle: {
    type: String,
    default: 'ÊúÄÊñ∞ÂÖ¨Âëä'
  },
  fcontent: {
    type: String,
    required: true
  },
  fstorageKey: {
    type: String,
    default: 'floating_notice_closed'
  },
  fduration: {
    type: Number,
    default: 0 // 0Ë°®Á§∫‰∏çËá™Âä®ÂÖ≥Èó≠
  }
})

// Áä∂ÊÄÅÁÆ°ÁêÜ - ‰ΩøÁî®Êú¨Âú∞Â≠òÂÇ®ËÆ∞ÂΩïÂÖ≥Èó≠Áä∂ÊÄÅ
const visible = useStorage(
  props.storageKey,
  true,
  localStorage,
  { writeDefaults: false }
)

// ÂÖ≥Èó≠ÂÖ¨Âëä
const handleClose = () => {
  visible.value = false
}

// Ëá™Âä®ÂÖ≥Èó≠ÂäüËÉΩ
onMounted(() => {
  if (props.duration > 0) {
    setTimeout(() => {
      visible.value = false
    }, props.duration)
  }
})
</script>

<style scoped>
.floating-notice {
  position: fixed;
  top: 2rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 9999;
  width: 90%;
  max-width: 600px;
  transition: all 0.3s ease-out;
  animation: floatIn 0.6s cubic-bezier(0.16, 1, 0.3, 1) forwards;
}

.notice-fcontent {
  background-color: rgba(255, 255, 255, 0.85);
  backdrop-filter: blur(10px);
  border: 1px solid var(--vp-c-divider);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  position: relative;
  transition: all 0.3s ease;
}

.notice-fcontent:hover {
  transform: translateY(-3px);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
}

.notice-ftitle {
  margin: 0 0 0.75rem 0;
  color: var(--vp-c-brand-1);
  font-size: 1.2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.notice-ftext {
  margin: 0;
  color: var(--vp-c-text-1);
  line-height: 1.6;
}

.notice-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: transparent;
  border: none;
  font-size: 1.2rem;
  color: var(--vp-c-text-2);
  cursor: pointer;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.notice-close:hover {
  background-color: var(--vp-c-bg-mute);
  color: var(--vp-c-text-1);
}

.notice-hidden {
  opacity: 0;
  transform: translate(-50%, -20px);
  pointer-events: none;
}

/* Ê∑±Ëâ≤Ê®°ÂºèÈÄÇÈÖç */
:deep(.dark) .notice-content {
  background-color: rgba(15, 15, 15, 0.85);
  border-color: var(--vp-c-divider-dark);
}

@keyframes floatIn {
  from {
    opacity: 0;
    transform: translate(-50%, -20px);
  }
  to {
    opacity: 1;
    transform: translate(-50%, 0);
  }
}

/* ÂìçÂ∫îÂºèËÆæËÆ° */
@media (max-width: 768px) {
  .notice-fcontent {
    padding: 1.25rem;
  }
  
  .notice-ftitle {
    font-size: 1.1rem;
  }
}
</style>
